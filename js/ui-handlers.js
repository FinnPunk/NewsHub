// NewsHub - –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ UI —Å–æ–±—ã—Ç–∏–π
// –í–µ—Ä—Å–∏—è: 2.1.8

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ VK –ø–æ—Å—Ç–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –≤–∞–∫–∞–Ω—Å–∏–∏
async function loadVKPostsForSelectedJobType(jobType) {
    if (!window.rssAggregator || !jobType) return;
    
    console.log(`üì± –ó–∞–≥—Ä—É–∂–∞–µ–º VK –ø–æ—Å—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞: ${jobType}`);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ VK
    window.loadingState.setLoading('vk', true);
    
    try {
        const vkPosts = await window.rssAggregator.loadVKPostsForJobType(jobType);
        
        if (vkPosts.length > 0) {
            console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${vkPosts.length} VK –ø–æ—Å—Ç–æ–≤ –¥–ª—è ${jobType}`);
            
            // –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–∞ –≤–∫–ª–∞–¥–∫–∞ "VK –Ω–æ–≤–æ—Å—Ç–∏", –æ–±–Ω–æ–≤–ª—è–µ–º –µ—ë
            const activeFilter = document.querySelector('.filter-chip.active')?.dataset.filter;
            if (activeFilter === 'vk-news') {
                const feedContainer = document.getElementById('feedContainer');
                const vkHTML = vkPosts.map(post => createNewsCard(post)).join('');
                feedContainer.innerHTML = vkHTML;
                
                // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
                const cards = feedContainer.querySelectorAll('.news-card');
                cards.forEach((card, index) => {
                    card.style.opacity = '0';
                    card.style.transform = 'translateY(20px)';
                    setTimeout(() => {
                        card.style.transition = 'all 0.3s ease';
                        card.style.opacity = '1';
                        card.style.transform = 'translateY(0)';
                    }, index * 50);
                });
            }
            
            // –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–∞ –≤–∫–ª–∞–¥–∫–∞ "–í—Å—ë", –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –≤–µ—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç
            if (activeFilter === 'all') {
                loadAllContent();
            }
        } else {
            console.log(`‚ÑπÔ∏è –ù–µ—Ç VK –ø–æ—Å—Ç–æ–≤ –¥–ª—è —Ç–∏–ø–∞ ${jobType}`);
        }
    } catch (error) {
        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ VK –ø–æ—Å—Ç–æ–≤:', error);
    } finally {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ VK
        window.loadingState.setLoading('vk', false);
    }
}

// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
async function loadAllContent() {
    const feedContainer = document.getElementById('feedContainer');
    const savedFilters = JSON.parse(localStorage.getItem('job_filters') || '{}');
    const jobType = savedFilters.jobType;
    
    let allContent = [];
    let hasRSS = false, hasVK = false, hasJobs = false;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á—Ç–æ –Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å
    if (window.rssAggregator) hasRSS = true;
    if (jobType && window.rssAggregator) hasVK = true;
    if (window.hhApi) hasJobs = true;
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
    window.loadingState.setLoading('rss', hasRSS);
    window.loadingState.setLoading('vk', hasVK);
    window.loadingState.setLoading('jobs', hasJobs);
    
    try {
        // 1. –ó–∞–≥—Ä—É–∂–∞–µ–º RSS –Ω–æ–≤–æ—Å—Ç–∏
        if (hasRSS) {
            console.log('üì∞ –ó–∞–≥—Ä—É–∂–∞–µ–º RSS –Ω–æ–≤–æ—Å—Ç–∏...');
            const rssNews = await window.rssAggregator.aggregateNews();
            allContent = [...allContent, ...rssNews];
            console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${rssNews.length} RSS –Ω–æ–≤–æ—Å—Ç–µ–π`);
            window.loadingState.setLoading('rss', false);
        }
        
        // 2. –ó–∞–≥—Ä—É–∂–∞–µ–º VK –ø–æ—Å—Ç—ã
        if (hasVK) {
            console.log(`üì± –ó–∞–≥—Ä—É–∂–∞–µ–º VK –ø–æ—Å—Ç—ã –¥–ª—è —Ç–∏–ø–∞: ${jobType}`);
            const vkPosts = await window.rssAggregator.loadVKPostsForJobType(jobType);
            allContent = [...allContent, ...vkPosts];
            console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${vkPosts.length} VK –ø–æ—Å—Ç–æ–≤`);
            window.loadingState.setLoading('vk', false);
        }
        
        // 3. –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏
        if (hasJobs) {
            console.log('üíº –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏...');
            const jobsData = await window.hhApi.searchVacancies({
                text: jobType ? window.CONFIG.jobTypes.find(j => j.id === jobType)?.name || '' : '',
                area: savedFilters.city || '1',
                per_page: 20
            });
            const jobs = window.hhApi.transformVacancies(jobsData.items || []);
            allContent = [...allContent, ...jobs];
            console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${jobs.length} –≤–∞–∫–∞–Ω—Å–∏–π`);
            window.loadingState.setLoading('jobs', false);
        }
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤–µ—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç
        if (allContent.length > 0) {
            displayMixedContent(allContent);
            console.log(`üéâ –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${allContent.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
        } else {
            feedContainer.innerHTML = `
                <div style="text-align: center; padding: 3rem;">
                    <h3>üòî –ù–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞</h3>
                    <p>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –∏ –≤–∞–∫–∞–Ω—Å–∏–∏</p>
                    <button class="btn btn--primary" onclick="loadAllContent()">–ü–æ–≤—Ç–æ—Ä–∏—Ç—å</button>
                </div>
            `;
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:', error);
        window.loadingState.setLoading('rss', false);
        window.loadingState.setLoading('vk', false);
        window.loadingState.setLoading('jobs', false);
        
        feedContainer.innerHTML = `
            <div style="text-align: center; padding: 3rem;">
                <h3>‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h3>
                <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑</p>
                <button class="btn btn--primary" onclick="loadAllContent()">–ü–æ–≤—Ç–æ—Ä–∏—Ç—å</button>
            </div>
        `;
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–º–µ—à–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
function displayMixedContent(items) {
    const feedContainer = document.getElementById('feedContainer');
    if (!feedContainer || !items.length) return;
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
    const sortedItems = items.sort((a, b) => {
        const dateA = new Date(a.publishedAt || a.published_at || 0);
        const dateB = new Date(b.publishedAt || b.published_at || 0);
        return dateB - dateA;
    });
    
    const html = sortedItems.map(item => {
        if (item.type === 'job') {
            return createJobCard(item);
        } else {
            return createNewsCard(item);
        }
    }).join('');
    
    feedContainer.innerHTML = html;
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    const cards = feedContainer.querySelectorAll('.news-card, .job-card');
    cards.forEach((card, index) => {
        card.style.opacity = '0';
        card.style.transform = 'translateY(20px)';
        setTimeout(() => {
            card.style.transition = 'all 0.3s ease';
            card.style.opacity = '1';
            card.style.transform = 'translateY(0)';
        }, index * 50);
    });
}

// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –±—ã—Å—Ç—Ä–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
function applyQuickFilter(filter) {
    const feedContainer = document.getElementById('feedContainer');
    
    console.log('üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞:', filter);
    
    // –î–ª—è –≤–∞–∫–∞–Ω—Å–∏–π - –∑–∞–≥—Ä—É–∂–∞–µ–º —á–µ—Ä–µ–∑ API
    if (filter === 'jobs') {
        console.log('üíº –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π...');
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –≤–∞–∫–∞–Ω—Å–∏–π
        if (!window.cachedNewsHTML) {
            window.cachedNewsHTML = feedContainer.innerHTML;
        }
        
        // –í—ã–∑—ã–≤–∞–µ–º loadJobsWithFilters
        if (typeof window.loadJobsWithFilters === 'function') {
            console.log('‚úÖ loadJobsWithFilters –Ω–∞–π–¥–µ–Ω–∞, –≤—ã–∑—ã–≤–∞–µ–º');
            window.loadJobsWithFilters(false);
        } else {
            console.error('‚ùå loadJobsWithFilters –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
            feedContainer.innerHTML = `
                <div style="text-align: center; padding: 3rem;">
                    <h3>‚ö†Ô∏è –û—à–∏–±–∫–∞</h3>
                    <p>–§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞</p>
                    <button class="btn btn--primary" onclick="location.reload()">–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å</button>
                </div>
            `;
        }
        return;
    }
    
    // –î–ª—è "–ù–æ–≤–æ—Å—Ç–∏" - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ RSS –Ω–æ–≤–æ—Å—Ç–∏
    if (filter === 'news') {
        if (window.cachedNewsHTML) {
            feedContainer.innerHTML = window.cachedNewsHTML;
        }
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ RSS –Ω–æ–≤–æ—Å—Ç–∏ (–Ω–µ VK)
        const articles = feedContainer.querySelectorAll('.news-card');
        articles.forEach(article => {
            const sourceType = article.dataset.sourceType;
            if (sourceType !== 'vk' && !article.classList.contains('job-card')) {
                article.style.display = 'block';
                article.style.animation = 'fadeInUp 0.3s ease';
            } else {
                article.style.display = 'none';
            }
        });
        return;
    }
    
    // –î–ª—è "–ù–æ–≤–æ—Å—Ç–∏ –∏–∑ –í–ö" - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ VK –ø–æ—Å—Ç—ã
    if (filter === 'vk-news') {
        if (window.cachedNewsHTML) {
            feedContainer.innerHTML = window.cachedNewsHTML;
        }
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ VK –Ω–æ–≤–æ—Å—Ç–∏
        const articles = feedContainer.querySelectorAll('.news-card');
        let vkCount = 0;
        articles.forEach(article => {
            const sourceType = article.dataset.sourceType;
            if (sourceType === 'vk') {
                article.style.display = 'block';
                article.style.animation = 'fadeInUp 0.3s ease';
                vkCount++;
            } else {
                article.style.display = 'none';
            }
        });
        
        // –ï—Å–ª–∏ –Ω–µ—Ç VK –ø–æ—Å—Ç–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if (vkCount === 0) {
            feedContainer.innerHTML = `
                <div style="text-align: center; padding: 3rem;">
                    <h3>üì± –ù–æ–≤–æ—Å—Ç–∏ –∏–∑ –í–ö –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è...</h3>
                    <p>–ü–æ—Å—Ç—ã –∏–∑ VK –≥—Ä—É–ø–ø –ø–æ—è–≤—è—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π</p>
                </div>
            `;
        }
        return;
    }
    
    // –î–ª—è "–í—Å–µ" - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º RSS, VK –∏ –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ–æ—á–µ—Ä–µ–¥–Ω–æ
    if (filter === 'all') {
        loadAllContent();
        return;
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ (RSS –Ω–æ–≤–æ—Å—Ç–∏ + VK –ø–æ—Å—Ç—ã + –≤–∞–∫–∞–Ω—Å–∏–∏)
async function performSearch(query) {
    const feedContainer = document.getElementById('feedContainer');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    feedContainer.innerHTML = `
        <div style="text-align: center; padding: 3rem;">
            <div class="spinner"></div>
            <h3>–ü–æ–∏—Å–∫ "${query}"...</h3>
            <p>–ò—â–µ–º –≤ RSS –Ω–æ–≤–æ—Å—Ç—è—Ö, VK –ø–æ—Å—Ç–∞—Ö –∏ –≤–∞–∫–∞–Ω—Å–∏—è—Ö</p>
        </div>
    `;
    
    let rssResults = [];
    let vkResults = [];
    let jobsResults = [];
    
    // –ü–æ–∏—Å–∫ –≤ RSS –Ω–æ–≤–æ—Å—Ç—è—Ö
    if (window.rssAggregator) {
        rssResults = window.rssAggregator.searchArticles(query);
    }
    
    // –ü–æ–∏—Å–∫ –≤ VK –ø–æ—Å—Ç–∞—Ö (–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≤–∞–∫–∞–Ω—Å–∏–∏ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞)
    if (window.rssAggregator) {
        try {
            const jobType = window.rssAggregator.detectJobTypeFromQuery(query);
            if (jobType) {
                console.log(`üîç –û–ø—Ä–µ–¥–µ–ª–µ–Ω —Ç–∏–ø –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞: ${jobType}`);
                const vkPosts = await window.rssAggregator.loadVKPostsForJobType(jobType);
                // –§–∏–ª—å—Ç—Ä—É–µ–º VK –ø–æ—Å—Ç—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É
                vkResults = vkPosts.filter(post => 
                    post.title.toLowerCase().includes(query.toLowerCase()) ||
                    post.description.toLowerCase().includes(query.toLowerCase())
                );
            }
        } catch (error) {
            console.warn('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ VK:', error);
        }
    }
    
    // –ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π –Ω–∞ HH.ru
    if (window.hhApi) {
        try {
            const hhResults = await window.hhApi.searchVacancies({
                text: query,
                per_page: 20
            });
            jobsResults = window.hhApi.transformVacancies(hhResults.items || []);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π:', error);
        }
    }
    
    const totalResults = rssResults.length + vkResults.length + jobsResults.length;
    
    if (totalResults > 0) {
        displaySearchResults([...rssResults, ...vkResults], jobsResults, query);
        console.log(`üîç –ù–∞–π–¥–µ–Ω–æ: ${rssResults.length} RSS, ${vkResults.length} VK, ${jobsResults.length} –≤–∞–∫–∞–Ω—Å–∏–π`);
    } else {
        feedContainer.innerHTML = `
            <div style="text-align: center; padding: 3rem;">
                <h3>–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</h3>
                <p>–ü–æ –∑–∞–ø—Ä–æ—Å—É "${query}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤</p>
                <button class="btn btn--primary" onclick="clearSearchResults()">–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ª–µ–Ω—Ç–µ</button>
            </div>
        `;
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
window.loadVKPostsForSelectedJobType = loadVKPostsForSelectedJobType;
window.loadAllContent = loadAllContent;
window.displayMixedContent = displayMixedContent;
window.applyQuickFilter = applyQuickFilter;
window.performSearch = performSearch;

export {
    loadVKPostsForSelectedJobType,
    loadAllContent,
    displayMixedContent,
    applyQuickFilter,
    performSearch
};
